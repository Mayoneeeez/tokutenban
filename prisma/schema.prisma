// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Player {
  player_id        String   @id @default(nanoid())
  player_name      String   @db.VarChar(50)
  created_datetime DateTime @default(now())
  updated_datetime DateTime @updatedAt
  scores           Score[]

  @@unique([player_name])
  @@map("players")
}

model Game {
  game_id           String   @id @default(nanoid())
  game_name         String   @db.VarChar(100)
  memo              String?  @db.Text
  created_datetime  DateTime @default(now())
  updated_datetime  DateTime @updatedAt
  scores            Score[]

  @@map("games")
}

model Score {
  score_id         String   @id @default(nanoid())
  game_id          String
  player_id        String
  round_number     Int
  score            Int
  created_datetime DateTime @default(now())
  updated_datetime DateTime @updatedAt
  game             Game     @relation(fields: [game_id], references: [game_id], onDelete: Cascade)
  player           Player   @relation(fields: [player_id], references: [player_id], onDelete: Cascade)

  @@unique([game_id, player_id, round_number], name: "unique_round_score")
  @@map("scores")
}

view PlayerTotal {
  game_id      String  @id
  player_id    String
  player_name  String
  total_score  Int

  @@map("player_totals")
}

view GameRanking {
  game_id      String  @id
  player_id    String
  player_name  String
  total_score  Int
  rank         Int

  @@map("game_rankings")
}